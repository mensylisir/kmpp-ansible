---
- name: loki-promtail | Create manifests dir
  file:
    path: "{{ kube_config_dir }}/addons/loki-promtail"
    state: directory
    owner: root
    group: root
    mode: 0755
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: loki-promtail | Copy files
  synchronize:
    src: "{{ role_path }}/files/"
    dest: "{{ kube_config_dir }}/addons/loki-promtail"
    recursive: yes
    delete: yes
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: loki-promtail  | Templates list
  set_fact:
    loki_templates:
      - { name: ns, file: ns.yaml, type: ns }

- name: loki-promtail | Create manifests
  template:
    src: "{{ item.file }}.j2"
    dest: "{{ kube_config_dir }}/addons/loki-promtail/{{ item.file }}"
  with_items: "{{ loki_templates }}"
  register: loki_manifests
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: loki-promtail | Apply manifests
  kube:
    name: "{{ item.item.name }}"
    kubectl: "{{ bin_dir }}/kubectl"
    resource: "{{ item.item.type }}"
    filename: "{{ kube_config_dir }}/addons/loki-promtail/{{ item.item.file }}"
    state: "latest"
  with_items: "{{ loki_manifests.results }}"
  when:
    - inventory_hostname == groups['kube_control_plane'][0]

- name: Deploy Loki and Promtail from local path
  shell: /usr/local/bin/helm install loki  "{{ kube_config_dir }}/addons/loki-promtail/loki-stack" -n loki-stack
  args:
    executable: /bin/bash
  register: "results"
- debug:
    var: results

- name: Deploy Grafana from local path
  shell: /usr/local/bin/helm install loki-grafana  "{{ kube_config_dir }}/addons/loki-promtail/loki-stack/charts/grafana"  -n loki-stack
  args:
    executable: /bin/bash
  register: "results2"

- debug:
    var: results2

